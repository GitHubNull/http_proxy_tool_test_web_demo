name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 代码质量检查
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          # 使用默认配置，包含errcheck, gosimple, govet, ineffassign等基础linter
          args: --timeout=5m

  # 单元测试
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23.x', '1.24.x']
        include:
          - go-version: '1.23.x'
            stable: true
          - go-version: '1.24.x'
            stable: false
    continue-on-error: ${{ !matrix.stable }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # 构建测试
  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Build
        run: go build -v .

      - name: Build with embedded static files
        run: go build -tags embed -v .

      - name: Test Docker build
        run: |
          docker build -t test-image .
          docker run --rm test-image --version

  # 安全扫描
  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: './...'

      - name: Run Go vulnerability check
        run: |
          # 清理Go模块缓存以避免版本冲突
          go clean -modcache
          go mod download
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # Docker构建测试
  docker-build-test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: proxy-test-tool:test
          build-args: |
            BUILD_VERSION=test
            BUILD_TIME=2024-01-01T00:00:00Z
            BUILD_COMMIT=test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm proxy-test-tool:test --version 2>/dev/null || echo "Version flag not supported yet"

  # 依赖检查 (移除重复的govulncheck)
  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Check for outdated dependencies
        run: |
          go list -u -m all

  # 性能测试
  performance:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Run benchmark tests
        run: |
          go test -bench=. -benchmem ./... | tee benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt

  # 集成测试
  integration:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Build application
        run: go build -o proxy-test-tool .

      - name: Start application
        run: |
          ./proxy-test-tool &
          sleep 5

      - name: Run integration tests
        run: |
          # 测试HTTP接口
          curl -f http://localhost:8080/api/test || exit 1
          curl -f http://localhost:8080/test/system || exit 1
          curl -f http://localhost:8080/ || exit 1
          
          # 测试API文档页面
          curl -f http://localhost:8080/api-docs || exit 1
          
          echo "所有集成测试通过！"

      - name: Stop application
        run: pkill -f proxy-test-tool || true

  # 检查结果汇总
  check-results:
    runs-on: ubuntu-latest
    needs: [lint, test, build, security, docker-build-test, dependency-check, performance, integration]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "代码质量检查: ${{ needs.lint.result }}"
          echo "单元测试: ${{ needs.test.result }}"
          echo "构建测试: ${{ needs.build.result }}"
          echo "安全扫描: ${{ needs.security.result }}"
          echo "Docker构建: ${{ needs.docker-build-test.result }}"
          echo "依赖检查: ${{ needs.dependency-check.result }}"
          echo "性能测试: ${{ needs.performance.result }}"
          echo "集成测试: ${{ needs.integration.result }}"
          
          if [ "${{ needs.lint.result }}" != "success" ] || 
             [ "${{ needs.test.result }}" != "success" ] || 
             [ "${{ needs.build.result }}" != "success" ] ||
             [ "${{ needs.integration.result }}" != "success" ]; then
            echo "❌ 有关键任务失败"
            exit 1
          else
            echo "✅ 所有关键任务都成功"
          fi 